import com.fasterxml.jackson.databind.ObjectMapper
import com.kjetland.jackson.jsonSchema.JsonSchemaGenerator

group 'org.jetbrains'
version '1.0-SNAPSHOT'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.fasterxml.jackson.core:jackson-annotations:2.8.5'
        classpath "com.kjetland:mbknor-jackson-jsonschema_2.12:${jsonSchemaVersion}"
    }
}

apply plugin: 'idea'
apply plugin: 'java'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url "http://dl.bintray.com/kotlin/kotlin-eap-1.1"
    }
}

dependencies {
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.8.5'
    compile project(':kotlin-schema')
}

task generateReflectiveProperties(type: DefaultTask, dependsOn: ['classes']) {
    doLast {
        def ncl = new GroovyClassLoader()
        ncl.addClasspath("${sourceSets.main.output.classesDir}")
        configurations.compile.each { ncl.addClasspath(it.path) }

        def weatherForecast = ncl.loadClass("com.objectpartners.plummer.service_schemas.dtos.WeatherForecast")
        def extendedForecast = ncl.loadClass("com.objectpartners.plummer.service_schemas.dtos.ExtendedForecast")
        def city = ncl.loadClass("com.objectpartners.plummer.service_schemas.dtos.City")

        def schema = new ObjectMapper().writeValueAsString([
                (weatherForecast.simpleName) : buildProperties(weatherForecast),
                (extendedForecast.simpleName): buildProperties(extendedForecast),
                (city.simpleName)            : buildProperties(city)
        ])

        def schemaOutputFile = new File("${projectDir}/build/reflective-properties.json")

        schemaOutputFile.delete()

        schemaOutputFile.withWriter('UTF-8') { writer ->
            writer.write(schema.toString())
        }
    }
}

private static <T> T buildProperties(Class<T> clazz) {
    return clazz.declaredFields.collectEntries {
        [it.name, it.type.simpleName]
    }
}

task generateJsonSchema(type: DefaultTask, dependsOn: ['classes']) {
    doLast {
        def ncl = new GroovyClassLoader()
        ncl.addClasspath("${sourceSets.main.output.classesDir}")
        configurations.compile.each { ncl.addClasspath(it.path) }

        def objectMapper = new ObjectMapper()
        def jsonSchemaGenerator = new JsonSchemaGenerator(objectMapper)
        def clazz = ncl.loadClass("com.objectpartners.plummer.service_schemas.dtos.ForecastServiceDtoWrapper")

        def schema = jsonSchemaGenerator.generateJsonSchema(clazz)
        def schemaOutputFile = new File("${projectDir}/build/json-schema.json")

        schemaOutputFile.delete()

        schemaOutputFile.withWriter('UTF-8') { writer ->
            writer.write(schema.toString())
        }
    }
}
